diff --git a/game_manager/board_manager.py b/game_manager/board_manager.py
index b51c156..fca906b 100644
--- a/game_manager/board_manager.py
+++ b/game_manager/board_manager.py
@@ -112,6 +112,7 @@ class BoardData(object):
         self.currentDirection = 0
         self.currentShape = Shape() # initial current shape data
         self.nextShape = None
+        self.holdShape = None
         self.shape_info_stat = [0] * 8
         self.obstacle_height = 0
         self.obstacle_probability = 0
@@ -160,11 +161,13 @@ class BoardData(object):
         length = len(self.ShapeList)
         return length
 
-    def getShapeData(self, ShapeNumber):
+    def getShapeDataFromShapeClass(self, ShapeClass):
 
-        ShapeClass = self.ShapeList[ShapeNumber]
-        ShapeIdx = ShapeClass.shape
+        if ShapeClass == None:
+            return None, None, None
 
+        #ShapeClass = self.ShapeList[ShapeNumber]
+        ShapeIdx = ShapeClass.shape
         ShapeRange = (0, 1, 2, 3)
         if ShapeIdx in (Shape.shapeI, Shape.shapeZ, Shape.shapeS):
             ShapeRange = (0, 1)
@@ -175,6 +178,13 @@ class BoardData(object):
 
         return ShapeClass, ShapeIdx, ShapeRange
 
+    def getShapeData(self, ShapeNumber):
+        ShapeClass = self.ShapeList[ShapeNumber]
+        return self.getShapeDataFromShapeClass(ShapeClass)
+
+    def getholdShapeData(self):
+        return self.getShapeDataFromShapeClass(self.holdShape)
+
     def getCurrentShapeCoord(self):
         return self.currentShape.getCoords(self.currentDirection, self.currentX, self.currentY)
 
@@ -306,6 +316,24 @@ class BoardData(object):
             return False
         return True
 
+    def setholdShape(self):
+        if self.holdShape == None:
+            # if holdShape not exists, set holdShape
+            self.holdShape = self.currentShape
+            self.createNewPiece()
+            return 1
+        else:
+            # if holdShape exists, exchange shapes
+            tmp = self.holdShape
+            self.holdShape = self.currentShape
+            self.currentShape = tmp
+            # init current X,Y,Direction
+            minX, maxX, minY, maxY = self.nextShape.getBoundingOffsets(0)
+            self.currentX = 5
+            self.currentY = -minY
+            self.currentDirection = 0
+        return 0
+
     def removeFullLines(self):
         newBackBoard = [0] * BoardData.width * BoardData.height
         newY = BoardData.height - 1
diff --git a/game_manager/game_manager.py b/game_manager/game_manager.py
index f5737b0..a9eecce 100644
--- a/game_manager/game_manager.py
+++ b/game_manager/game_manager.py
@@ -131,7 +131,8 @@ class Game_Manager(QMainWindow):
     def initUI(self):
         self.gridSize = 22
         self.NextShapeYOffset = 90
-        self.NextShapeMaxAppear = self.ShapeListMax - 1
+        # display maximum 4 next blocks
+        self.NextShapeMaxAppear = min(4, self.ShapeListMax - 1)
 
         self.speed = self.drop_interval # block drop speed
 
@@ -244,7 +245,8 @@ class Game_Manager(QMainWindow):
                                   "x": "none",            # next x position (range: 0 - (witdh-1) )
                                   "y_operation": "none",  # movedown or dropdown (0:movedown, 1:dropdown)
                                   "y_moveblocknum": "none", # amount of next y movement
-                                  },
+                                  "use_hold_function": "n", # use hold function (y:yes, n:no)
+                                },
                             "option":
                                 { "reset_callback_function_addr":None,
                                   "reset_all_field": None,
@@ -291,6 +293,15 @@ class Game_Manager(QMainWindow):
                 next_y_moveblocknum = self.nextMove["strategy"]["y_moveblocknum"]
                 y_operation = self.nextMove["strategy"]["y_operation"]
                 next_direction = self.nextMove["strategy"]["direction"]
+                use_hold_function = self.nextMove["strategy"]["use_hold_function"]
+
+                # if use_hold_function
+                if use_hold_function == "y":
+                    ret = BOARD_DATA.setholdShape()
+                    if ret == 1:
+                        # if if holdShape not exists, hold currentShape and return immediately.
+                        return
+
                 k = 0
                 while BOARD_DATA.currentDirection != next_direction and k < 4:
                     ret = BOARD_DATA.rotateRight()
@@ -353,6 +364,7 @@ class Game_Manager(QMainWindow):
 
             # update window
             self.updateWindow()
+            return
         else:
             super(Game_Manager, self).timerEvent(event)
 
@@ -403,6 +415,11 @@ class Game_Manager(QMainWindow):
                         },
                         "nextShapeList":{
                         },
+                        "holdShape":{
+                           "class":"none",
+                           "index":"none",
+                           "direction_range":"none",
+                        },
                       },
                   "judge_info":
                       {
@@ -496,6 +513,12 @@ class Game_Manager(QMainWindow):
                 "index":ShapeIdx,
                 "direction_range":ShapeRange,
             }
+        ### hold shape
+        holdShapeClass, holdShapeIdx, holdShapeRange = BOARD_DATA.getholdShapeData()
+        status["block_info"]["holdShape"]["class"] = holdShapeClass
+        status["block_info"]["holdShape"]["index"] = holdShapeIdx
+        status["block_info"]["holdShape"]["direction_range"] = holdShapeRange
+        ### next shape
         ## judge_info
         status["judge_info"]["elapsed_time"] = round(time.time() - self.tboard.start_time, 3)
         status["judge_info"]["game_time"] = self.game_time
@@ -665,6 +688,8 @@ class Game_Manager(QMainWindow):
         elif (key == Qt.Key_Space and self.mode == 'keyboard') or (key == Qt.Key_Up and self.mode == 'gamepad'):
             removedlines, dropdownlines = BOARD_DATA.dropDown()
             self.UpdateScore(removedlines, dropdownlines)
+        elif key == Qt.Key_C:
+            BOARD_DATA.setholdShape()
         else:
             super(Game_Manager, self).keyPressEvent(event)
 
@@ -713,6 +738,7 @@ class SidePanel(QFrame):
 
         ShapeListLength = BOARD_DATA.getShapeListLength()
         
+        # draw next shape
         for i in range(ShapeListLength):
             if i == 0:
                 # skip current shape
@@ -731,6 +757,23 @@ class SidePanel(QFrame):
             for x, y in ShapeClass.getCoords(0, 0, -minY):
                 drawSquare(painter, x * self.gridSize + dx, y * self.gridSize + dy + y_offset, val, self.gridSize)
 
+        # draw hold block area
+        painter.setPen(QColor(0x777777))
+        height_offset = self.height() - self.gridSize*4.65
+        painter.drawLine(0, height_offset,
+                         self.width(), height_offset)
+        painter.drawText(0, self.height(), 'HOLD');
+        holdShapeClass, holdShapeIdx, holdShapeRange = BOARD_DATA.getholdShapeData()
+        if holdShapeClass != None:
+            # if holdShape exists, try to draw
+            minX, maxX, minY, maxY = holdShapeClass.getBoundingOffsets(0)
+            dy = 1 * self.gridSize
+            dx = (self.width() - (maxX - minX) * self.gridSize) / 2
+            val = holdShapeClass.shape
+            y_offset = self.NextShapeYOffset * 4
+            for x, y in holdShapeClass.getCoords(0, 0, -minY):
+                drawSquare(painter, x * self.gridSize + dx, y * self.gridSize + dy + y_offset, val, self.gridSize)
+
 class Board(QFrame):
     msg2Statusbar = pyqtSignal(str)
 
