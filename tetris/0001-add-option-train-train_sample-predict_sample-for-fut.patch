From a6783939ddff463ccb8c4d5bf72b889cd417530b Mon Sep 17 00:00:00 2001
From: seigot <s.takada.3o3@gmail.com>
Date: Tue, 25 Jan 2022 15:21:29 +0900
Subject: [PATCH] add option "train", "train_sample", "predict_sample", for
 future extension

---
 game_manager/game_manager.py | 42 +++++++++++++++++++++++++++++++++++-
 start.py                     |  4 ++--
 2 files changed, 43 insertions(+), 3 deletions(-)

diff --git a/game_manager/game_manager.py b/game_manager/game_manager.py
index 28168fb..0a1b4da 100644
--- a/game_manager/game_manager.py
+++ b/game_manager/game_manager.py
@@ -84,7 +84,7 @@ class Game_Manager(QMainWindow):
                           self.ShapeListMax)
         if args.game_time >= 0:
             self.game_time = args.game_time
-        if args.mode in ("keyboard", "gamepad", "sample", "train"):
+        if args.mode in ("keyboard", "gamepad", "sample", "train", "train_sample", "predict_sample"):
             self.mode = args.mode
         if args.drop_interval >= 0:
             self.drop_interval = args.drop_interval
@@ -179,6 +179,19 @@ class Game_Manager(QMainWindow):
         BOARD_DATA.clear()
         BOARD_DATA.createNewPiece()
 
+    def reset_all_field(self):
+        # reset all field for debug
+        # this function is mainly for machine learning
+        self.tboard.reset_cnt = 0
+        self.tboard.score = 0
+        self.tboard.dropdownscore = 0
+        self.tboard.linescore = 0
+        self.tboard.line = 0
+        self.tboard.line_score_stat = [0, 0, 0, 0]
+        self.tboard.start_time = time.time()
+        BOARD_DATA.clear()
+        BOARD_DATA.createNewPiece()
+
     def updateWindow(self):
         self.tboard.updateData()
         self.sidePanel.updateData()
@@ -205,12 +218,34 @@ class Game_Manager(QMainWindow):
                                   "y_operation": "none",  # movedown or dropdown (0:movedown, 1:dropdown)
                                   "y_moveblocknum": "none", # amount of next y movement
                                   },
+                            "option":
+                                {
+                                  "reset_all_field": None,
+                                }
                             }
                 # get nextMove from GameController
                 GameStatus = self.getGameStatus()
 
                 if self.mode == "sample":
+                    # sample
                     self.nextMove = BLOCK_CONTROLLER_SAMPLE.GetNextMove(nextMove, GameStatus)
+
+                elif self.mode == "train_sample" or self.mode == "predict_sample":
+                    # sample train/predict
+                    # import block_controller_train_sample, it's necessary to install pytorch to use.
+                    # from machine_learning.block_controller_train_sample import BLOCK_CONTROLLER_TRAIN_SAMPLE
+                    # self.nextMove = BLOCK_CONTROLLER_TRAIN_SAMPLE.GetNextMove(nextMove, GameStatus)
+                    print("---")
+                    print("currently mode:{} is not supported".format(self.mode))
+                    sys.exit(0)
+                elif self.mode == "train":
+                    # train
+                    # import block_controller_train, it's necessary to install pytorch to use.
+                    # from machine_learning.block_controller_train import BLOCK_CONTROLLER_TRAIN
+                    # self.nextMove = BLOCK_CONTROLLER_TRAIN.GetNextMove(nextMove, GameStatus)
+                    print("---")
+                    print("currently mode:{} is not supported".format(self.mode))
+                    sys.exit(0)
                 else:
                     self.nextMove = BLOCK_CONTROLLER.GetNextMove(nextMove, GameStatus)
 
@@ -274,6 +309,11 @@ class Game_Manager(QMainWindow):
                 print("reset field.")
                 self.resetfield()
 
+            # reset all field if debug option is enabled
+            if self.nextMove["option"]["reset_all_field"] == True:
+                print("reset all field.")
+                self.reset_all_field()
+
             # init nextMove
             self.nextMove = None
 
diff --git a/start.py b/start.py
index f48636b..e597601 100644
--- a/start.py
+++ b/start.py
@@ -15,7 +15,7 @@ def get_option(game_level, game_time, mode, random_seed, drop_interval, resultlo
                            help='Specify game time(s), if specify -1, do endless loop')
     argparser.add_argument('-m', '--mode', type=str,
                            default=mode,
-                           help='Specify mode (keyboard/gamepad/sample/train) if necessary')
+                           help='Specify mode (keyboard/gamepad/sample/train/train_sample/predict_sample) if necessary')
     argparser.add_argument('-r', '--random_seed', type=int,
                            default=random_seed,
                            help='Specify random seed if necessary') 
@@ -66,7 +66,7 @@ def start():
         GAME_LEVEL = args.game_level
     if args.game_time >= 0 or args.game_time == -1:
         GAME_TIME = args.game_time
-    if args.mode in ("keyboard", "gamepad", "sample", "train"):
+    if args.mode in ("keyboard", "gamepad", "sample", "train", "train_sample", "predict_sample"):
         IS_MODE = args.mode
     if args.random_seed >= 0:
         INPUT_RANDOM_SEED = args.random_seed
-- 
2.23.0

