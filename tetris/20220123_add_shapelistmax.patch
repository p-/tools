diff --git a/game_manager/board_manager.py b/game_manager/board_manager.py
index fc4f493..13d5620 100644
--- a/game_manager/board_manager.py
+++ b/game_manager/board_manager.py
@@ -117,6 +117,13 @@ class BoardData(object):
         self.obstacle_probability = 0
         self.random_seed = 0
         self.nextShapeIndexCnt = 1
+        self.ShapeListMax = 2
+        # ShapeList
+        #  ShapeNumber 0: currentShape
+        #  ShapeNumber 1: nextShape
+        #  ShapeNumber 2: next nextShape
+        #  ...
+        self.ShapeList = []
 
     def init_randomseed(self, num):
         self.random_seed = int(num % (2**32-1))
@@ -124,6 +131,9 @@ class BoardData(object):
         np_randomObstacle.random.seed(self.random_seed)
         np_randomObstaclePiece.random.seed(self.random_seed)
 
+    def init_shape_parameter(self, ShapeListMax):
+        self.ShapeListMax = ShapeListMax
+
     def init_obstacle_parameter(self, height, probability):
         self.obstacle_height = height
         self.obstacle_probability = probability
@@ -145,6 +155,25 @@ class BoardData(object):
     def getValue(self, x, y):
         return self.backBoard[x + y * BoardData.width]
 
+    def getShapeListLength(self):
+        length = len(self.ShapeList)
+        return length
+
+    def getShapeData(self, ShapeNumber):
+
+        ShapeClass = self.ShapeList[ShapeNumber]
+        ShapeIdx = ShapeClass.shape
+
+        ShapeRange = (0, 1, 2, 3)
+        if ShapeIdx in (Shape.shapeI, Shape.shapeZ, Shape.shapeS):
+            ShapeRange = (0, 1)
+        elif ShapeIdx == Shape.shapeO:
+            ShapeRange = (0,)
+        else:
+            ShapeRange = (0, 1, 2, 3)
+
+        return ShapeClass, ShapeIdx, ShapeRange
+
     def getCurrentShapeCoord(self):
         return self.currentShape.getCoords(self.currentDirection, self.currentX, self.currentY)
 
@@ -162,18 +191,28 @@ class BoardData(object):
 
     def createNewPiece(self):
         if self.nextShape == None:
-            self.nextShape = Shape(self.getNewShapeIndex()) # initial next shape data
+            self.ShapeList.insert(len(self.ShapeList), 0)
+            # initialize next shape data
+            for i in range(self.ShapeListMax-1):
+                self.ShapeList.insert(len(self.ShapeList), Shape(self.getNewShapeIndex()))
+            self.nextShape = self.ShapeList[1]
 
         minX, maxX, minY, maxY = self.nextShape.getBoundingOffsets(0)
         result = False
+
+        # check if nextShape can appear
         if self.tryMoveCurrent(0, 5, -minY):
             self.currentX = 5
             self.currentY = -minY
             self.currentDirection = 0
-            self.currentShape = self.nextShape
-            self.nextShape = Shape(self.getNewShapeIndex())
+            # get nextShape
+            self.ShapeList.pop(0)
+            self.ShapeList.insert(len(self.ShapeList), Shape(self.getNewShapeIndex()))
+            self.currentShape = self.ShapeList[0]
+            self.nextShape = self.ShapeList[1]
             result = True
         else:
+            # cannnot appear
             self.currentShape = Shape()
             self.currentX = -1
             self.currentY = -1
diff --git a/game_manager/game_manager.py b/game_manager/game_manager.py
index 76f3c8f..28168fb 100644
--- a/game_manager/game_manager.py
+++ b/game_manager/game_manager.py
@@ -15,7 +15,7 @@ import time
 import json
 import pprint
 
-def get_option(game_time, mode, drop_interval, random_seed, obstacle_height, obstacle_probability, resultlogjson, user_name):
+def get_option(game_time, mode, drop_interval, random_seed, obstacle_height, obstacle_probability, resultlogjson, user_name, ShapeListMax):
     argparser = ArgumentParser()
     argparser.add_argument('--game_time', type=int,
                            default=game_time,
@@ -41,6 +41,10 @@ def get_option(game_time, mode, drop_interval, random_seed, obstacle_height, obs
     argparser.add_argument('-u', '--user_name', type=str,
                            default=user_name,
                            help='Specigy user name if necessary')
+    argparser.add_argument('--ShapeListMax', type=int,
+                           default=ShapeListMax,
+                           help='Specigy NextShapeNumberMax if necessary')
+
     return argparser.parse_args()
 
 class Game_Manager(QMainWindow):
@@ -66,6 +70,7 @@ class Game_Manager(QMainWindow):
         self.random_seed = time.time() * 10000000 # 0
         self.obstacle_height = 0
         self.obstacle_probability = 0
+        self.ShapeListMax = 2
         self.resultlogjson = ""
         self.user_name = ""
         args = get_option(self.game_time,
@@ -75,7 +80,8 @@ class Game_Manager(QMainWindow):
                           self.obstacle_height,
                           self.obstacle_probability,
                           self.resultlogjson,
-                          self.user_name)
+                          self.user_name,
+                          self.ShapeListMax)
         if args.game_time >= 0:
             self.game_time = args.game_time
         if args.mode in ("keyboard", "gamepad", "sample", "train"):
@@ -92,10 +98,15 @@ class Game_Manager(QMainWindow):
             self.resultlogjson = args.resultlogjson
         if len(args.user_name) != 0:
             self.user_name = args.user_name
+        if args.ShapeListMax > 0:
+            self.ShapeListMax = args.ShapeListMax
         self.initUI()
 
     def initUI(self):
         self.gridSize = 22
+        self.NextShapeYOffset = 90
+        self.NextShapeMaxAppear = self.ShapeListMax - 1
+
         self.speed = self.drop_interval # block drop speed
 
         self.timer = QBasicTimer()
@@ -108,10 +119,11 @@ class Game_Manager(QMainWindow):
                             self.game_time,
                             random_seed_Nextshape,
                             self.obstacle_height,
-                            self.obstacle_probability)
+                            self.obstacle_probability,
+                            self.ShapeListMax)
         hLayout.addWidget(self.tboard)
 
-        self.sidePanel = SidePanel(self, self.gridSize)
+        self.sidePanel = SidePanel(self, self.gridSize, self.NextShapeYOffset, self.NextShapeMaxAppear)
         hLayout.addWidget(self.sidePanel)
 
         self.statusbar = self.statusBar()
@@ -315,6 +327,8 @@ class Game_Manager(QMainWindow):
                            "index":"none",
                            "direction_range":"none",
                         },
+                        "nextShapeList":{
+                        },
                       },
                   "judge_info":
                       {
@@ -388,26 +402,25 @@ class Game_Manager(QMainWindow):
         status["block_info"]["currentX"] = BOARD_DATA.currentX
         status["block_info"]["currentY"] = BOARD_DATA.currentY
         status["block_info"]["currentDirection"] = BOARD_DATA.currentDirection
-        status["block_info"]["currentShape"]["class"] = BOARD_DATA.currentShape
-        status["block_info"]["currentShape"]["index"] = BOARD_DATA.currentShape.shape
         ### current shape
-        if BOARD_DATA.currentShape.shape in (Shape.shapeI, Shape.shapeZ, Shape.shapeS):
-            Range = (0, 1)
-        elif BOARD_DATA.currentShape.shape == Shape.shapeO:
-            Range = (0,)
-        else:
-            Range = (0, 1, 2, 3)
-        status["block_info"]["currentShape"]["direction_range"] = Range
+        currentShapeClass, currentShapeIdx, currentShapeRange = BOARD_DATA.getShapeData(0)
+        status["block_info"]["currentShape"]["class"] = currentShapeClass
+        status["block_info"]["currentShape"]["index"] = currentShapeIdx
+        status["block_info"]["currentShape"]["direction_range"] = currentShapeRange
         ### next shape
-        status["block_info"]["nextShape"]["class"] = BOARD_DATA.nextShape
-        status["block_info"]["nextShape"]["index"] = BOARD_DATA.nextShape.shape
-        if BOARD_DATA.nextShape.shape in (Shape.shapeI, Shape.shapeZ, Shape.shapeS):
-            Range = (0, 1)
-        elif BOARD_DATA.nextShape.shape == Shape.shapeO:
-            Range = (0,)
-        else:
-            Range = (0, 1, 2, 3)
-        status["block_info"]["nextShape"]["direction_range"] = Range
+        nextShapeClass, nextShapeIdx, nextShapeRange = BOARD_DATA.getShapeData(1)
+        status["block_info"]["nextShape"]["class"] = nextShapeClass
+        status["block_info"]["nextShape"]["index"] = nextShapeIdx
+        status["block_info"]["nextShape"]["direction_range"] = nextShapeRange
+        ### next shape list
+        for i in range(BOARD_DATA.getShapeListLength()):
+            ElementNo="element" + str(i)
+            ShapeClass, ShapeIdx, ShapeRange = BOARD_DATA.getShapeData(i)
+            status["block_info"]["nextShapeList"][ElementNo] = {
+                "class":ShapeClass,
+                "index":ShapeIdx,
+                "direction_range":ShapeRange,
+            }
         ## judge_info
         status["judge_info"]["elapsed_time"] = round(time.time() - self.tboard.start_time, 3)
         status["judge_info"]["game_time"] = self.game_time
@@ -444,7 +457,7 @@ class Game_Manager(QMainWindow):
         status["debug_info"]["random_seed"] = self.random_seed
         status["debug_info"]["obstacle_height"] = self.obstacle_height
         status["debug_info"]["obstacle_probability"] = self.obstacle_probability
-        if BOARD_DATA.currentShape == Shape.shapeNone:
+        if currentShapeIdx == Shape.shapeNone:
             print("warning: current shape is none !!!")
 
         return status
@@ -606,38 +619,51 @@ def drawSquare(painter, x, y, val, s):
 
 
 class SidePanel(QFrame):
-    def __init__(self, parent, gridSize):
+    def __init__(self, parent, gridSize, NextShapeYOffset, NextShapeMaxAppear):
         super().__init__(parent)
         self.setFixedSize(gridSize * 5, gridSize * BOARD_DATA.height)
         self.move(gridSize * BOARD_DATA.width, 0)
         self.gridSize = gridSize
+        self.NextShapeYOffset = NextShapeYOffset
+        self.NextShapeMaxAppear = NextShapeMaxAppear
 
     def updateData(self):
         self.update()
 
     def paintEvent(self, event):
         painter = QPainter(self)
-        minX, maxX, minY, maxY = BOARD_DATA.nextShape.getBoundingOffsets(0)
-
-        dy = 3 * self.gridSize
-        dx = (self.width() - (maxX - minX) * self.gridSize) / 2
-
-        val = BOARD_DATA.nextShape.shape
-        for x, y in BOARD_DATA.nextShape.getCoords(0, 0, -minY):
-            drawSquare(painter, x * self.gridSize + dx, y * self.gridSize + dy, val, self.gridSize)
 
+        ShapeListLength = BOARD_DATA.getShapeListLength()
+        
+        for i in range(ShapeListLength):
+            if i == 0:
+                # skip current shape
+                continue
+            if i > self.NextShapeMaxAppear:
+                break
+
+            ShapeClass, ShapeIdx, ShapeRange = BOARD_DATA.getShapeData(i) # nextShape
+            minX, maxX, minY, maxY = ShapeClass.getBoundingOffsets(0)
+
+            dy = 1 * self.gridSize
+            dx = (self.width() - (maxX - minX) * self.gridSize) / 2
+            
+            val = ShapeClass.shape
+            y_offset = self.NextShapeYOffset * (i - 1) #(self.NextShapeMaxAppear - i)
+            for x, y in ShapeClass.getCoords(0, 0, -minY):
+                drawSquare(painter, x * self.gridSize + dx, y * self.gridSize + dy + y_offset, val, self.gridSize)
 
 class Board(QFrame):
     msg2Statusbar = pyqtSignal(str)
 
-    def __init__(self, parent, gridSize, game_time, random_seed, obstacle_height, obstacle_probability):
+    def __init__(self, parent, gridSize, game_time, random_seed, obstacle_height, obstacle_probability, ShapeListMax):
         super().__init__(parent)
         self.setFixedSize(gridSize * BOARD_DATA.width, gridSize * BOARD_DATA.height)
         self.gridSize = gridSize
         self.game_time = game_time
-        self.initBoard(random_seed, obstacle_height, obstacle_probability)
+        self.initBoard(random_seed, obstacle_height, obstacle_probability, ShapeListMax)
 
-    def initBoard(self, random_seed_Nextshape, obstacle_height, obstacle_probability):
+    def initBoard(self, random_seed_Nextshape, obstacle_height, obstacle_probability, ShapeListMax):
         self.score = 0
         self.dropdownscore = 0
         self.linescore = 0
@@ -648,6 +674,7 @@ class Board(QFrame):
         BOARD_DATA.clear()
         BOARD_DATA.init_randomseed(random_seed_Nextshape)
         BOARD_DATA.init_obstacle_parameter(obstacle_height, obstacle_probability)
+        BOARD_DATA.init_shape_parameter(ShapeListMax)
 
     def paintEvent(self, event):
         painter = QPainter(self)
diff --git a/start.py b/start.py
index a41a4a3..f48636b 100644
--- a/start.py
+++ b/start.py
@@ -5,7 +5,7 @@ import sys
 import subprocess
 from argparse import ArgumentParser
 
-def get_option(game_level, game_time, mode, random_seed, drop_interval, resultlogjson, user_name):
+def get_option(game_level, game_time, mode, random_seed, drop_interval, resultlogjson, user_name, ShapeListMax):
     argparser = ArgumentParser()
     argparser.add_argument('-l', '--game_level', type=int,
                            default=game_level,
@@ -28,6 +28,9 @@ def get_option(game_level, game_time, mode, random_seed, drop_interval, resultlo
     argparser.add_argument('-u', '--user_name', type=str,
                            default=user_name,
                            help='Specigy user name if necessary')
+    argparser.add_argument('--ShapeListMax', type=int,
+                           default=ShapeListMax,
+                           help='Specigy ShapeListMax if necessary')
     return argparser.parse_args()
 
 def get_python_cmd():
@@ -48,6 +51,7 @@ def start():
     DROP_INTERVAL = 1000          # drop interval
     RESULT_LOG_JSON = "result.json"
     USER_NAME = "window_sample"
+    SHAPE_LIST_MAX = 2
 
     ## update value if args are given
     args = get_option(GAME_LEVEL,
@@ -56,7 +60,8 @@ def start():
                       INPUT_RANDOM_SEED,
                       DROP_INTERVAL,
                       RESULT_LOG_JSON,
-                      USER_NAME)
+                      USER_NAME,
+                      SHAPE_LIST_MAX)
     if args.game_level >= 0:
         GAME_LEVEL = args.game_level
     if args.game_time >= 0 or args.game_time == -1:
@@ -71,6 +76,8 @@ def start():
         RESULT_LOG_JSON = args.resultlogjson
     if len(args.user_name) != 0:
         USER_NAME = args.user_name
+    if args.ShapeListMax > 1:
+        SHAPE_LIST_MAX = args.ShapeListMax
 
     ## set field parameter for level 1
     RANDOM_SEED = 0            # random seed for field
@@ -116,7 +123,8 @@ def start():
         + ' ' + '--drop_interval' + ' ' + str(DROP_INTERVAL) \
         + ' ' + '--mode' + ' ' + str(IS_MODE) \
         + ' ' + '--user_name' + ' ' + str(USER_NAME) \
-        + ' ' + '--resultlogjson' + ' ' + str(RESULT_LOG_JSON)
+        + ' ' + '--resultlogjson' + ' ' + str(RESULT_LOG_JSON) \
+        + ' ' + '--ShapeListMax' + ' ' + str(SHAPE_LIST_MAX)
 
     ret = subprocess.run(cmd, shell=True)
     if ret.returncode != 0:
